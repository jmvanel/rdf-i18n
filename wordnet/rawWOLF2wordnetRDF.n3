@prefix wolf: <http://alpage.inria.fr/sagot/wolf#>.
@prefix wn20schema: <http://www.w3.org/2006/03/wn/wn20/schema/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix fn: <http://www.w3.org/2006/xpath-functions#>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .

@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .

{ ?S wolf:ID ?ID .
  # _:d e:trace ( "?ID" ?ID).
  ?S  wolf:SYNONYM ?SYN .
  #    _:d e:trace ( "?SYN" ?SYN).
     ?SYN wolf:LITERAL ?LIT .
  # _:d e:trace ( "?LIT" ?LIT).
         ?LIT rdf:value ?LABEL_FR .
         # ?LIT ?P ?LABEL_FR .
  # _:d e:trace ( "?LABEL_FR"  ?LABEL_FR).

  # transform e.g.  "eng-30-08663156-n" into "108663156"
  ( ?ID "eng-30-" ) func:substring-after ?ID2 .
  # _:d e:trace ( "?ID2" ?ID2).
  ( "1" ?ID2 ) string:concatenation ?ID3 .
  # _:d e:trace ( "?ID3" ?ID3).
  ( ?ID3 "(.*)-n$" ) string:scrape ?ID4 .
  # _:d e:trace ( "?ID4" ?ID4).
  # (?ID4) xsd:int ?ID5 .
  (?ID4 xsd:int) log:dtlit ?ID5 .
  # _:d e:trace ( "?ID5" ?ID5).
  ?SYNSET wn20schema:synsetId ?SYNSET_ID .
  (?SYNSET_ID xsd:int) log:dtlit ?SYNSET_ID_INT .
  # _:d e:trace ( "?SYNSET" ?SYNSET).
  (?LABEL_FR "FR") func:PlainLiteral-from-string-lang ?LABEL_FR_FR .
  ?SYNSET_ID_INT math:equalTo ?ID5 .
} => {
  ?SYNSET rdfs:label ?LABEL_FR_FR .
} .
